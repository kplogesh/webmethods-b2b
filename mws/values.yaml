---
fullnameOverride: ""
nameOverride: ""
environment: dev

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: daeigcs04241.eur.ad.sag
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
podConfig: 
  autoScaling: 
    enabled: false 
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  tolerations: 
    - key: "app"
      operator: "Equal"
      value: "b2b"
      effect: "NoSchedule" 
  # Options for node affinity for pod placement is required | preferred. Whether affinity is required or not is decided by setNodeAffinity parameter that can be set to true | false
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: app
            operator: In
            values:
            - "b2b" 
  #securityConext values
  podSecurityContext:
    fsGroup: 1724
    runAsUser: 1724
  # Service account name
  serviceAccountName: b2b-sa
  replicas: 1
  podManagementPolicy: OrderedReady
  updateStrategy: RollingUpdate
  partition: 0
  appName: b2b
  # Persistent Volume Claim
  PersistentVolumeClaimName: b2b-nfs-storage
  diskAccessMode: ReadWriteOnce
  storageClassName: local-path
  diskStorage: 2Gi
  # Secrets
  secretName: b2b-secrets

  # Secret to be used to pull the image from repository
  imagePullSecrets: regcred
  # Container configurations residing in a pod
  primaryContainer:
    image: 
      repository: mws
      tag: "10.15.0" 
      pullPolicy: IfNotPresent
    # Resources required for the apigateway to function. CPUs and Memory configurations.
    resources:
      limits:
        cpu: 1
        memory: "4G"
      requests:
        cpu: 1
        memory: "4G" 
    env:
      - name: DB_USERNAME
        valueFrom:
          secretKeyRef: 
            name: b2b-secrets
            key: DB_MWS_USER
      - name: DB_PASSWORD
        valueFrom:
          secretKeyRef: 
            name:  b2b-secrets
            key: DB_MWS_PASSWORD
      - name: DB_TYPE
        valueFrom:
          configMapKeyRef: 
            name:  mws
            key: DB_TYPE        
      - name: DB_URL
        valueFrom:
          configMapKeyRef: 
            name:  mws
            key: DB_URL
      - name: NODE_NAME
        value: mws
    ports:
      - containerPort: 8585
        name: http
      - containerPort: 8586
        name: https
    # Liveness probe to check whether container is active. Restart happens when liveness probe fails.
    livenessProbe:
      timeoutSeconds: 5
      initialDelaySeconds: 60
      failureThreshold: 5
      periodSeconds: 20
      successThreshold: 1
      tcpSocket:
        port: 8585
    # Readiness probe to check whether container is ready. Restart happens when readiness probe fails.
    readinessProbe:
      tcpSocket:
        port: 8585
      timeoutSeconds: 5
      initialDelaySeconds: 60
      failureThreshold: 5
      periodSeconds: 20
      successThreshold: 1
    # Startup probe for the application to be ready. Pauses readiness/liveness probe till startup is successful
    startupProbe:
      tcpSocket:
        port: 8585
      failureThreshold: 20
      periodSeconds: 20
    # Volume mount required for the application to function
    mwsVolumesPath: /opt/mws/MWS/volumes

    # PostStart command execution
    lifecycle: []
    # Intercommunication credential updates | default user password updates
    wsclientGlobalFileName: wsclient.global.xml
    wsclientGlobalPath: /opt/mws/MWS/volumes/configs/assets_cfg/wsclient.global.xml
    userFileName: updateusers.xml
    userFilePath: /opt/mws/MWS/volumes/configs/assets_cfg/updateusers.xml
    clusterFileName: cluster.xml
    clusterFilePath: /opt/mws/MWS/volumes/configs/cluster_cfg/cluster.xml
    customWrapperFileName: custom_wrapper.conf
    customWrapperFilePath: /opt/mws/MWS/volumes/configs/profile_cfg/custom_wrapper.conf
# Pod configuration ends here.

#Service definition
service:
  type: NodePort
  # Ingress routing port
  port: 8585
  sessionAffinity:
    enabled: true
serviceAnnotations:
  prometheus.io/scrape: 'true'    
  prometheus.io/port: '8585'
nodePortDef:
    - port: 8585
      name: http-server
      targetPort: 8585
    - port: 8586
      name: https-server
      targetPort: 8586
headlessPortDef:
    - port: 8585
      name: http-server
      targetPort: 8585
    - port: 8586
      name: https-server
      targetPort: 8586